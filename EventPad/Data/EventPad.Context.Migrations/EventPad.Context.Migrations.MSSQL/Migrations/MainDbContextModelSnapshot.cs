// <auto-generated />
using System;
using EventPad.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventPad.Context.Migrations.MSSQL.Migrations
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventPad.Context.Entities.CashoutEventReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventAccountId")
                        .HasColumnType("int");

                    b.Property<string>("RKTransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventAccountId");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("cashout_event_receipts", (string)null);
                });

            modelBuilder.Entity("EventPad.Context.Entities.CashoutReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RKTransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("UserAccountId");

                    b.ToTable("cashout_receipts", (string)null);
                });

            modelBuilder.Entity("EventPad.Context.Entities.DepositReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RKTransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("UserAccountId");

                    b.ToTable("deposit_receipts", (string)null);
                });

            modelBuilder.Entity("EventPad.Context.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Repeat")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("EventPad.Context.Entities.EventAccount", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.HasKey("EventId");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.ToTable("event_accounts", (string)null);
                });

            modelBuilder.Entity("EventPad.Context.Entities.EventPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("event_photos", (string)null);
                });

            modelBuilder.Entity("EventPad.Context.Entities.EventTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("DateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<float?>("Price")
                        .HasColumnType("real");

                    b.Property<bool>("Private")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("WeekDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("event_tickets", (string)null);
                });

            modelBuilder.Entity("EventPad.Context.Entities.EventVisitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventTicketId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventTicketId");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("event_visitors", (string)null);
                });

            modelBuilder.Entity("EventPad.Context.Entities.PurchaseReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventTicketId")
                        .HasColumnType("int");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventTicketId");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("UserAccountId");

                    b.ToTable("purchase_receipts", (string)null);
                });

            modelBuilder.Entity("EventPad.Context.Entities.RefundReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventTicketId")
                        .HasColumnType("int");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventTicketId");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("UserAccountId");

                    b.ToTable("refund_receipts", (string)null);
                });

            modelBuilder.Entity("EventPad.Context.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("EventPad.Context.Entities.UserAccount", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.HasKey("UserId");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.ToTable("user_accounts", (string)null);
                });

            modelBuilder.Entity("EventPad.Context.Entities.CashoutEventReceipt", b =>
                {
                    b.HasOne("EventPad.Context.Entities.EventAccount", "Account")
                        .WithMany("Cashouts")
                        .HasForeignKey("EventAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventPad.Context.Entities.User", "User")
                        .WithMany("CashoutEventReceipts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventPad.Context.Entities.CashoutReceipt", b =>
                {
                    b.HasOne("EventPad.Context.Entities.UserAccount", "UserAccount")
                        .WithMany("Cashouts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("EventPad.Context.Entities.DepositReceipt", b =>
                {
                    b.HasOne("EventPad.Context.Entities.UserAccount", "UserAccount")
                        .WithMany("Deposits")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("EventPad.Context.Entities.Event", b =>
                {
                    b.HasOne("EventPad.Context.Entities.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventPad.Context.Entities.EventAccount", "EventAccount")
                        .WithOne("Event")
                        .HasForeignKey("EventPad.Context.Entities.Event", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventAccount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventPad.Context.Entities.EventPhoto", b =>
                {
                    b.HasOne("EventPad.Context.Entities.Event", "Event")
                        .WithMany("Photos")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventPad.Context.Entities.EventTicket", b =>
                {
                    b.HasOne("EventPad.Context.Entities.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventPad.Context.Entities.EventVisitor", b =>
                {
                    b.HasOne("EventPad.Context.Entities.EventTicket", "EventTicket")
                        .WithMany("Visitors")
                        .HasForeignKey("EventTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventPad.Context.Entities.User", "User")
                        .WithMany("EventVisitors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventTicket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventPad.Context.Entities.PurchaseReceipt", b =>
                {
                    b.HasOne("EventPad.Context.Entities.EventTicket", "EventTicket")
                        .WithMany("Purchases")
                        .HasForeignKey("EventTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventPad.Context.Entities.UserAccount", "UserAccount")
                        .WithMany("Purchases")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventTicket");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("EventPad.Context.Entities.RefundReceipt", b =>
                {
                    b.HasOne("EventPad.Context.Entities.EventTicket", "EventTicket")
                        .WithMany("Refunds")
                        .HasForeignKey("EventTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventPad.Context.Entities.UserAccount", "UserAccount")
                        .WithMany("Refunds")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventTicket");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("EventPad.Context.Entities.User", b =>
                {
                    b.HasOne("EventPad.Context.Entities.UserAccount", "Account")
                        .WithOne("User")
                        .HasForeignKey("EventPad.Context.Entities.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("EventPad.Context.Entities.Event", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("EventPad.Context.Entities.EventAccount", b =>
                {
                    b.Navigation("Cashouts");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventPad.Context.Entities.EventTicket", b =>
                {
                    b.Navigation("Purchases");

                    b.Navigation("Refunds");

                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("EventPad.Context.Entities.User", b =>
                {
                    b.Navigation("CashoutEventReceipts");

                    b.Navigation("EventVisitors");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventPad.Context.Entities.UserAccount", b =>
                {
                    b.Navigation("Cashouts");

                    b.Navigation("Deposits");

                    b.Navigation("Purchases");

                    b.Navigation("Refunds");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
